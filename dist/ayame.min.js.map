{"version":3,"file":"ayame.min.js","sources":["../src/utils.ts","../src/connection/index.ts","../src/connection/base.ts","../src/ayame.ts"],"sourcesContent":["import { AudioCodecOption, VideoCodecOption } from './connection/options';\n\n/**\n * @ignore\n */\ninterface Window {\n  performance: WindowPerformance;\n  navigator: any;\n}\ninterface WindowPerformance {\n  now(): number;\n}\ndeclare let window: Window;\n\n/**\n * @ignore\n */\nexport function randomString(strLength: number): string {\n  const result = [];\n  const charSet = '0123456789';\n  while (strLength--) {\n    result.push(charSet.charAt(Math.floor(Math.random() * charSet.length)));\n  }\n  return result.join('');\n}\n\n/**\n * @ignore\n */\nexport function browser(): string {\n  const ua = window.navigator.userAgent.toLocaleLowerCase();\n  if (ua.indexOf('edge') !== -1) {\n    return 'edge';\n  } else if (ua.indexOf('chrome') !== -1 && ua.indexOf('edge') === -1) {\n    return 'chrome';\n  } else if (ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1) {\n    return 'safari';\n  } else if (ua.indexOf('opera') !== -1) {\n    return 'opera';\n  } else if (ua.indexOf('firefox') !== -1) {\n    return 'firefox';\n  }\n  return 'unknown';\n}\n\n/**\n * @ignore\n */\nexport function traceLog(title: string, value?: string | Record<string, any>): void {\n  let prefix = '';\n  if (window.performance) {\n    prefix = '[Ayame ' + (window.performance.now() / 1000).toFixed(3) + ']';\n  }\n  if (browser() === 'edge') {\n    console.log(prefix + ' ' + title + '\\n', value);\n  } else {\n    console.info(prefix + ' ' + title + '\\n', value);\n  }\n}\n\n// Stack Overflow より引用: https://stackoverflow.com/a/52760103\n// https://stackoverflow.com/questions/52738290/how-to-remove-video-codecs-in-webrtc-sdp\n/** @private */\nexport function getVideoCodecsFromString(codec: VideoCodecOption, codecs: Array<any>): Array<any> {\n  let mimeType = '';\n  if (codec === 'VP8') {\n    mimeType = 'video/VP8';\n  } else if (codec === 'VP9') {\n    mimeType = 'video/VP9';\n  } else if (codec === 'H264') {\n    mimeType = 'video/H264';\n  } else {\n    mimeType = `video/${codec}`;\n  }\n  const filteredCodecs: Array<any> = codecs.filter((c) => c.mimeType == mimeType);\n  if (filteredCodecs.length < 1) {\n    throw new Error('invalid video codec type');\n  }\n  return filteredCodecs;\n}\n\n/**\n * @ignore\n */\nexport function removeCodec(sdp: string, codec: VideoCodecOption): string {\n  function internalFunc(tmpSdp: string): string {\n    // eslint-disable-next-line no-useless-escape\n    const codecre = new RegExp('(a=rtpmap:(\\\\d*) ' + codec + '/90000\\\\r\\\\n)');\n    const rtpmaps = tmpSdp.match(codecre);\n    if (rtpmaps == null || rtpmaps.length <= 2) {\n      return sdp;\n    }\n    const rtpmap = rtpmaps[2];\n    let modsdp = tmpSdp.replace(codecre, '');\n\n    const rtcpre = new RegExp('(a=rtcp-fb:' + rtpmap + '.*\\r\\n)', 'g');\n    modsdp = modsdp.replace(rtcpre, '');\n\n    const fmtpre = new RegExp('(a=fmtp:' + rtpmap + '.*\\r\\n)', 'g');\n    modsdp = modsdp.replace(fmtpre, '');\n\n    const aptpre = new RegExp('(a=fmtp:(\\\\d*) apt=' + rtpmap + '\\\\r\\\\n)');\n    const aptmaps = modsdp.match(aptpre);\n    let fmtpmap = '';\n    if (aptmaps != null && aptmaps.length >= 3) {\n      fmtpmap = aptmaps[2];\n      modsdp = modsdp.replace(aptpre, '');\n\n      const rtppre = new RegExp('(a=rtpmap:' + fmtpmap + '.*\\r\\n)', 'g');\n      modsdp = modsdp.replace(rtppre, '');\n    }\n\n    const videore = /(m=video.*\\r\\n)/;\n    const videolines = modsdp.match(videore);\n    if (videolines != null) {\n      //If many m=video are found in SDP, this program doesn't work.\n      const videoline = videolines[0].substring(0, videolines[0].length - 2);\n      const videoelems = videoline.split(' ');\n      let modvideoline = videoelems[0];\n      videoelems.forEach((videoelem, index) => {\n        if (index === 0) return;\n        if (videoelem == rtpmap || videoelem == fmtpmap) {\n          return;\n        }\n        modvideoline += ' ' + videoelem;\n      });\n      modvideoline += '\\r\\n';\n      modsdp = modsdp.replace(videore, modvideoline);\n    }\n    return internalFunc(modsdp);\n  }\n  return internalFunc(sdp);\n}\n\n/** @private */\nexport function getAudioCodecsFromString(codec: AudioCodecOption, codecs: Array<any>): Array<any> {\n  // check if 'none' means reset to Default codecs list\n  if (codec === 'none') {\n    // just return default codec\n    const filteredCodecs: Array<any> = codecs;\n    return filteredCodecs;\n  }\n\n  // check if codec start with 'audio/' \n  if (codec.startsWith('audio/')) {\n    const [mimeType, clockRate, sdpFmtpLine] = codec.split(' ');\n    console.log(mimeType, clockRate, sdpFmtpLine);\n    //console.log(JSON.stringify(codecs, null, ' '));\n\n    const selectedCodecIndex = codecs.findIndex(c => c.mimeType === mimeType && c.clockRate === parseInt(clockRate, 10) && c.sdpFmtpLine === sdpFmtpLine);\n    const selectedCodec = codecs[selectedCodecIndex];\n    const filteredCodecs: Array<any> = codecs;\n    filteredCodecs.splice(selectedCodecIndex, 1);\n    filteredCodecs.unshift(selectedCodec);\n    filteredCodecs.splice(1);   // remove except 1st item\n    \n    // log codec preference (for Debug)\n    //console.log('Preferred audio codec', selectedCodec);\n    //console.log(JSON.stringify(filteredCodecs, null, ' '));\n    return filteredCodecs;\n  }\n\n  // otherwise, use codecs array provided and filter it\n  let mimeType = '';\n  if (codec === 'opus') {\n    mimeType = 'audio/opus';\n  } else if (codec === 'ISAC') {\n    mimeType = 'audio/ISAC';\n  } else if (codec === 'G722') {\n    mimeType = 'audio/G722';\n  } else if (codec === 'PCMU') {\n    mimeType = 'audio/PCMU';\n  } else if (codec === 'PCMA') {\n    mimeType = 'audio/PCMA';\n  } else if (codec === 'red') {\n    mimeType = 'audio/red';\n  } else {\n    mimeType = `audio/${codec}`;\n  }\n  const filteredCodecs: Array<any> = codecs.filter((c) => c.mimeType == mimeType);\n  if (filteredCodecs.length < 1) {\n    throw new Error('invalid audio codec type');\n  }\n  return filteredCodecs;\n}\n","import ConnectionBase from './base';\nimport { ConnectionOptions, MetadataOption } from './options';\n\n/**\n * Peer Connection 接続を管理するクラスです。\n */\nclass Connection extends ConnectionBase {\n  /**\n   * @desc オブジェクトを生成し、リモートのピアまたはサーバーに接続します。\n   * @param {string} signalingUrl シグナリングに利用する URL\n   * @param {string} roomId Ayame のルームID\n   * @param {ConnectionOptions} options Ayame の接続オプション\n   * @param {boolean} [debug=false] デバッグログの出力可否\n   * @param {boolean} [isRelay=false] iceTransportPolicy を強制的に relay にするか\n   * @listens {open} Ayame Server に accept され、PeerConnection が生成されると送信されます。\n   * @listens {connect} PeerConnection が接続されると送信されます。\n   * @listens {disconnect} PeerConnection が切断されると送信されます。\n   * @listens {addstream} リモートのストリームが追加されると送信されます。\n   * @listens {removestream} リモートのストリームが削除されると送信されます。\n   */\n  constructor(signalingUrl: string, roomId: string, options: ConnectionOptions, debug = false, isRelay = false) {\n    super(signalingUrl, roomId, options, debug, isRelay);\n  }\n\n  /**\n   * @typedef {Object} MetadataOption - 接続時に指定できるメタデータです。\n   * @property {any} authnMetadata 送信するメタデータ\n   */\n\n  /**\n   * @desc PeerConnection  接続を開始します。\n   * @param {MediaStream|null} [stream=null] - ローカルのストリーム\n   * @param {MetadataOption|null} [metadataOption=null] - 送信するメタデータ\n   */\n  public async connect(stream: MediaStream | null, metadataOption: MetadataOption | null = null): Promise<void> {\n    if (this._ws || this._pc) {\n      this._traceLog('connection already exists');\n      throw new Error('Connection Already Exists!');\n    }\n    /** @type {MediaStream|null} */\n    this.stream = stream;\n    if (metadataOption) {\n      /** @type {any} */\n      this.authnMetadata = metadataOption.authnMetadata;\n    }\n    await this._signaling();\n  }\n\n  /**\n   * @desc Datachannel を作成します。\n   * @param {string} label - dataChannel の label\n   * @param {RTCDataChannelInit|undefined} [options=undefined] - dataChannel の init オプション\n   * @return {RTCDataChannel|null} 生成されたデータチャネル\n   */\n  public async createDataChannel(\n    label: string,\n    options: RTCDataChannelInit | undefined = undefined\n  ): Promise<RTCDataChannel | null> {\n    return await this._createDataChannel(label, options);\n  }\n\n  /**\n   * @desc Datachannel を削除します。\n   * @param {string} label - 削除する dataChannel の label\n   */\n  public async removeDataChannel(label: string): Promise<void> {\n    this._traceLog('datachannel remove=>', label);\n    const dataChannel = this._findDataChannel(label);\n    if (dataChannel && dataChannel.readyState === 'open') {\n      await this._closeDataChannel(dataChannel);\n    } else {\n      throw new Error('data channel is not exist or open');\n    }\n  }\n\n  /**\n   * @desc PeerConnection  接続を切断します。\n   */\n  public async disconnect(): Promise<void> {\n    return new Promise((resolve) => {\n      if (this._ws) {\n        this._ws.close();\n      }\n      return resolve();\n    });\n  }\n}\n\nexport default Connection;\n","/* @private */\nimport { traceLog, getAudioCodecsFromString, getVideoCodecsFromString, removeCodec, browser } from '../utils';\nimport { ConnectionOptions, AudioCodecOption, VideoCodecOption } from './options';\n\n/**\n * @ignore\n */\ninterface AyameRegisterMessage {\n  type: string;\n  roomId: string;\n  clientId: string;\n  key?: string;\n  authnMetadata?: any;\n}\n\n/**\n * @ignore\n */\nclass ConnectionBase {\n  debug: boolean;\n  roomId: string;\n  signalingUrl: string;\n  options: ConnectionOptions;\n  connectionState: string;\n  stream: MediaStream | null;\n  remoteStream: MediaStream | null;\n  authnMetadata: any;\n  authzMetadata: any;\n  _ws: WebSocket | null;\n  _pc: RTCPeerConnection | null;\n  _callbacks: any;\n  _removeVideoCodec: boolean;\n  _isOffer: boolean;\n  _isExistUser: boolean;\n  _dataChannels: Array<RTCDataChannel>;\n  _pcConfig: {\n    iceServers: Array<RTCIceServer>;\n    iceTransportPolicy: RTCIceTransportPolicy;\n  };\n\n  /**\n   * @ignore\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  on(kind: string, callback: Function): void {\n    if (kind in this._callbacks) {\n      this._callbacks[kind] = callback;\n    }\n  }\n\n  /**\n   * オブジェクトを生成し、リモートのピアまたはサーバーに接続します。\n   * @param signalingUrl シグナリングに利用する URL\n   * @param roomId Ayame のルームID\n   * @param options Ayame の接続オプション\n   * @param [debug=false] デバッグログの出力可否\n   * @param [isRelay=false] iceTransportPolicy を強制的に relay にするか\n   * @listens {open} Ayame Server に accept され、PeerConnection が生成されると送信されます。\n   * @listens {connect} PeerConnection が接続されると送信されます。\n   * @listens {disconnect} PeerConnection が切断されると送信されます。\n   * @listens {addstream} リモートのストリームが追加されると送信されます。\n   * @listens {removestream} リモートのストリームが削除されると送信されます。\n   * @listens {bye} Ayame Server から bye を受信すると送信されます。\n   */\n  constructor(signalingUrl: string, roomId: string, options: ConnectionOptions, debug = false, isRelay = false) {\n    this.debug = debug;\n    this.roomId = roomId;\n    this.signalingUrl = signalingUrl;\n    this.options = options;\n    this._removeVideoCodec = false;\n    this.stream = null;\n    this.remoteStream = null;\n    this._pc = null;\n    this._ws = null;\n    this.authnMetadata = null;\n    this.authzMetadata = null;\n    this._dataChannels = [];\n    this._isOffer = false;\n    this._isExistUser = false;\n    this.connectionState = 'new';\n    this._pcConfig = {\n      iceServers: this.options.iceServers,\n      iceTransportPolicy: isRelay ? 'relay' : 'all'\n    };\n    this._callbacks = {\n      open: () => {},\n      connect: () => {},\n      disconnect: () => {},\n      addstream: () => {},\n      removestream: () => {},\n      bye: () => {},\n      datachannel: () => {}\n    };\n  }\n\n  async _disconnect(): Promise<void> {\n    await this._dataChannels.forEach(async (dataChannel: RTCDataChannel) => {\n      await this._closeDataChannel(dataChannel);\n    });\n    await this._closePeerConnection();\n    await this._closeWebSocketConnection();\n    this.authzMetadata = null;\n    this._removeVideoCodec = false;\n    this._isOffer = false;\n    this._isExistUser = false;\n    this._dataChannels = [];\n    this.connectionState = 'new';\n  }\n\n  async _signaling(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this._ws) {\n        return reject('WS-ALREADY-EXISTS');\n      }\n      this._ws = new WebSocket(this.signalingUrl);\n      this._ws.onclose = async () => {\n        await this._disconnect();\n        this._callbacks.disconnect({ reason: 'WS-CLOSED' });\n        return reject('WS-CLOSED');\n      };\n      this._ws.onerror = async () => {\n        await this._disconnect();\n        return reject('WS-CLOSED-WITH-ERROR');\n      };\n      this._ws.onopen = () => {\n        const registerMessage: AyameRegisterMessage = {\n          type: 'register',\n          roomId: this.roomId,\n          clientId: this.options.clientId,\n          authnMetadata: undefined,\n          key: undefined\n        };\n        if (this.authnMetadata !== null) {\n          registerMessage.authnMetadata = this.authnMetadata;\n        }\n        if (this.options.signalingKey !== null) {\n          registerMessage.key = this.options.signalingKey;\n        }\n        this._sendWs(registerMessage);\n        if (this._ws) {\n          this._ws.onmessage = async (event: MessageEvent) => {\n            try {\n              if (typeof event.data !== 'string') {\n                return;\n              }\n              const message = JSON.parse(event.data);\n              if (message.type === 'ping') {\n                this._sendWs({ type: 'pong' });\n              } else if (message.type === 'bye') {\n                this._callbacks.bye(event);\n                return resolve();\n              } else if (message.type === 'accept') {\n                this.authzMetadata = message.authzMetadata;\n                if (Array.isArray(message.iceServers) && message.iceServers.length > 0) {\n                  this._traceLog('iceServers=>', message.iceServers);\n                  this._pcConfig.iceServers = message.iceServers;\n                }\n                this._traceLog('isExistUser=>', message.isExistUser);\n                this._isExistUser = message.isExistUser;\n                this._createPeerConnection();\n                if (this._isExistUser === true) {\n                  await this._sendOffer();\n                }\n                return resolve();\n              } else if (message.type === 'reject') {\n                await this._disconnect();\n                this._callbacks.disconnect({ reason: message.reason || 'REJECTED' });\n                return reject('REJECTED');\n              } else if (message.type === 'offer') {\n                if (this._pc && this._pc.signalingState === 'have-local-offer') {\n                  this._createPeerConnection();\n                }\n                this._setOffer(new RTCSessionDescription(message));\n              } else if (message.type === 'answer') {\n                await this._setAnswer(new RTCSessionDescription(message));\n              } else if (message.type === 'candidate') {\n                if (message.ice) {\n                  this._traceLog('Received ICE candidate ...', message.ice);\n                  const candidate = new RTCIceCandidate(message.ice);\n                  this._addIceCandidate(candidate);\n                }\n              }\n            } catch (error) {\n              await this._disconnect();\n              this._callbacks.disconnect({ reason: 'SIGNALING-ERROR', error: error });\n            }\n          };\n        }\n      };\n    });\n  }\n\n  _createPeerConnection(): void {\n    this._traceLog('RTCConfiguration=>', this._pcConfig);\n    const pc = new RTCPeerConnection(this._pcConfig);\n\n    const audioTrack = this.stream && this.stream.getAudioTracks()[0];\n    if (audioTrack && this.options.audio.direction !== 'recvonly') {\n      const audioSender = pc.addTrack(audioTrack, this.stream!);\n      const audioTransceiver = this._getTransceiver(pc, audioSender);\n      if (this._isAudioCodecSpecified() && audioTransceiver !== null) {\n        if (typeof audioTransceiver.setCodecPreferences !== 'undefined') {\n          const audioCapabilities = RTCRtpSender.getCapabilities('audio');  // get Sender capability\n          if (audioCapabilities && this.options.audio.codec) {\n            let audioCodecs = getAudioCodecsFromString(this.options.audio.codec, audioCapabilities.codecs);\n            this._traceLog('audio codecs=', audioCodecs);\n            audioTransceiver.setCodecPreferences(audioCodecs);\n          }\n        } else {\n          // in case browser does not have capability\n          //this._removeAudioCodec = true;\n        }\n      }\n    } else if (this.options.audio.enabled) {\n      const audioTransceiver = pc.addTransceiver('audio', { direction: 'recvonly' });\n      if (this._isAudioCodecSpecified()) {\n        if (typeof audioTransceiver.setCodecPreferences !== 'undefined') {\n          const audioCapabilities = RTCRtpReceiver.getCapabilities('audio');  // get Receiver capability\n          if (audioCapabilities && this.options.audio.codec) {\n            let audioCodecs = getAudioCodecsFromString(this.options.audio.codec, audioCapabilities.codecs);\n            this._traceLog('audio codecs=', audioCodecs);\n            audioTransceiver.setCodecPreferences(audioCodecs);\n          }\n        } else {\n          //this._removeAudioCodec = true;\n        }\n      }\n    }\n\n    const videoTrack = this.stream && this.stream.getVideoTracks()[0];\n    if (videoTrack && this.options.video.direction !== 'recvonly') {\n      const videoSender = pc.addTrack(videoTrack, this.stream!);\n      const videoTransceiver = this._getTransceiver(pc, videoSender);\n      if (this._isVideoCodecSpecified() && videoTransceiver !== null) {\n        if (typeof videoTransceiver.setCodecPreferences !== 'undefined') {\n          const videoCapabilities = RTCRtpSender.getCapabilities('video');\n          if (videoCapabilities) {\n            let videoCodecs = [];\n            if (this.options.video.codec) {\n              videoCodecs = getVideoCodecsFromString(this.options.video.codec, videoCapabilities.codecs);\n            }\n            this._traceLog('video codecs=', videoCodecs);\n            videoTransceiver.setCodecPreferences(videoCodecs);\n          }\n        } else {\n          this._removeVideoCodec = true;\n        }\n      }\n    } else if (this.options.video.enabled) {\n      const videoTransceiver = pc.addTransceiver('video', { direction: 'recvonly' });\n      if (this._isVideoCodecSpecified()) {\n        if (typeof videoTransceiver.setCodecPreferences !== 'undefined') {\n          const videoCapabilities = RTCRtpSender.getCapabilities('video');\n          if (videoCapabilities) {\n            let videoCodecs = [];\n            if (this.options.video.codec) {\n              videoCodecs = getVideoCodecsFromString(this.options.video.codec, videoCapabilities.codecs);\n            }\n            this._traceLog('video codecs=', videoCodecs);\n            videoTransceiver.setCodecPreferences(videoCodecs);\n          }\n        } else {\n          this._removeVideoCodec = true;\n        }\n      }\n    }\n    const tracks: Array<MediaStreamTrack> = [];\n    pc.ontrack = (event: RTCTrackEvent) => {\n      const callbackEvent: any = event;\n      this._traceLog('peer.ontrack()', event);\n      if (browser() === 'safari') {\n        tracks.push(event.track);\n        const mediaStream = new MediaStream(tracks);\n        this.remoteStream = mediaStream;\n      } else {\n        this.remoteStream = event.streams[0];\n      }\n      callbackEvent.stream = this.remoteStream;\n      this._callbacks.addstream(callbackEvent);\n    };\n    pc.onicecandidate = (event: RTCPeerConnectionIceEvent) => {\n      this._traceLog('peer.onicecandidate()', event);\n      if (event.candidate) {\n        this._sendIceCandidate(event.candidate);\n      } else {\n        this._traceLog('empty ice event', '');\n      }\n    };\n    pc.oniceconnectionstatechange = async () => {\n      this._traceLog('ICE connection Status has changed to ', pc.iceConnectionState);\n      if (this.connectionState !== pc.iceConnectionState) {\n        this.connectionState = pc.iceConnectionState;\n        switch (this.connectionState) {\n          case 'connected':\n            this._isOffer = false;\n            this._callbacks.connect();\n            break;\n          case 'disconnected':\n          case 'failed':\n            await this._disconnect();\n            this._callbacks.disconnect({ reason: 'ICE-CONNECTION-STATE-FAILED' });\n            break;\n        }\n      }\n    };\n    pc.onsignalingstatechange = (_) => {\n      this._traceLog('signaling state changes:', pc.signalingState);\n    };\n    pc.ondatachannel = this._onDataChannel.bind(this);\n    if (!this._pc) {\n      this._pc = pc;\n      this._callbacks.open({ authzMetadata: this.authzMetadata });\n    } else {\n      this._pc = pc;\n    }\n  }\n\n  async _createDataChannel(label: string, options: RTCDataChannelInit | undefined): Promise<RTCDataChannel | null> {\n    return new Promise<RTCDataChannel | null>((resolve, reject) => {\n      if (!this._pc) return reject('PeerConnection Does Not Ready');\n      if (this._isOffer) return reject('PeerConnection Has Local Offer');\n      let dataChannel = this._findDataChannel(label);\n      if (dataChannel) {\n        return reject('DataChannel Already Exists!');\n      }\n      if (this._isExistUser) {\n        dataChannel = this._pc.createDataChannel(label, options);\n        dataChannel.onclose = (event: Record<string, any>) => {\n          this._traceLog('datachannel onclosed=>', event);\n          this._dataChannels = this._dataChannels.filter((dataChannel) => dataChannel.label != label);\n        };\n        dataChannel.onerror = (event: Record<string, any>) => {\n          this._traceLog('datachannel onerror=>', event);\n          this._dataChannels = this._dataChannels.filter((dataChannel) => dataChannel.label != label);\n        };\n        dataChannel.onmessage = (event: any) => {\n          this._traceLog('datachannel onmessage=>', event.data);\n          event.label = label;\n        };\n        dataChannel.onopen = (event: Record<string, any>) => {\n          this._traceLog('datachannel onopen=>', event);\n        };\n        this._dataChannels.push(dataChannel);\n        return resolve(dataChannel);\n      }\n      return resolve(null);\n    });\n  }\n\n  _onDataChannel(event: RTCDataChannelEvent): void {\n    this._traceLog('on data channel', event);\n    if (!this._pc) return;\n    const dataChannel = event.channel;\n    const label = event.channel.label;\n    if (!event.channel) return;\n    if (!label || label.length < 1) return;\n    dataChannel.onopen = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onopen=>', event);\n    };\n    dataChannel.onclose = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onclosed=>', event);\n    };\n    dataChannel.onerror = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onerror=>', event);\n    };\n    dataChannel.onmessage = (event: any) => {\n      this._traceLog('datachannel onmessage=>', event.data);\n      event.label = label;\n    };\n    if (!this._findDataChannel(label)) {\n      this._dataChannels.push(event.channel);\n    } else {\n      this._dataChannels = this._dataChannels.map((channel) => {\n        if (channel.label == label) {\n          return dataChannel;\n        } else {\n          return channel;\n        }\n      });\n    }\n    this._callbacks.datachannel(dataChannel);\n  }\n\n  async _sendOffer() {\n    if (!this._pc) {\n      return;\n    }\n    if (browser() === 'safari') {\n      if (this.options.video.enabled && this.options.video.direction === 'sendrecv') {\n        this._pc.addTransceiver('video', { direction: 'recvonly' });\n      }\n      if (this.options.audio.enabled && this.options.audio.direction === 'sendrecv') {\n        this._pc.addTransceiver('audio', { direction: 'recvonly' });\n      }\n    }\n    const offer: any = await this._pc.createOffer({\n      offerToReceiveAudio: this.options.audio.enabled && this.options.audio.direction !== 'sendonly',\n      offerToReceiveVideo: this.options.video.enabled && this.options.video.direction !== 'sendonly'\n    });\n    if (this._removeVideoCodec && this.options.video.codec) {\n      const codecs: Array<VideoCodecOption> = ['VP8', 'VP9', 'H264'];\n      codecs.forEach((codec: VideoCodecOption) => {\n        if (this.options.video.codec !== codec) {\n          offer.sdp = removeCodec(offer.sdp, codec);\n        }\n      });\n    }\n    this._traceLog('create offer sdp, sdp=', offer.sdp);\n    await this._pc.setLocalDescription(offer);\n    if (this._pc.localDescription) {\n      this._sendSdp(this._pc.localDescription);\n    }\n    this._isOffer = true;\n  }\n\n  _isAudioCodecSpecified(): boolean {\n    // \"this.options.audio.codec\" can be \"null\" or \"undefined\" so exclude these cases\n    //return this.options.audio.enabled && this.options.audio.codec !== null && typeof this.options.audio.codec !== \"undefined\";\n\n    // \"this.options.audio.codec\" can be \"null\" or \"undefined\" so exclude these 2 cases using \"!= null\" (same as above)\n    return this.options.audio.enabled && this.options.audio.codec != null;\n  }\n\n  _isVideoCodecSpecified(): boolean {\n    return this.options.video.enabled && this.options.video.codec !== null;\n  }\n\n  async _createAnswer(): Promise<void> {\n    if (!this._pc) {\n      return;\n    }\n    try {\n      const answer = await this._pc.createAnswer();\n      this._traceLog('create answer sdp, sdp=', answer.sdp);\n      await this._pc.setLocalDescription(answer);\n      if (this._pc.localDescription) this._sendSdp(this._pc.localDescription);\n    } catch (error) {\n      await this._disconnect();\n      this._callbacks.disconnect({ reason: 'CREATE-ANSWER-ERROR', error: error });\n    }\n  }\n\n  async _setAnswer(sessionDescription: RTCSessionDescription): Promise<void> {\n    if (!this._pc) {\n      return;\n    }\n    await this._pc.setRemoteDescription(sessionDescription);\n    this._traceLog('set answer sdp=', sessionDescription.sdp);\n  }\n\n  async _setOffer(sessionDescription: RTCSessionDescription): Promise<void> {\n    try {\n      if (!this._pc) {\n        return;\n      }\n      await this._pc.setRemoteDescription(sessionDescription);\n      this._traceLog('set offer sdp=', sessionDescription.sdp);\n      await this._createAnswer();\n    } catch (error) {\n      await this._disconnect();\n      this._callbacks.disconnect({ reason: 'SET-OFFER-ERROR', error: error });\n    }\n  }\n\n  async _addIceCandidate(candidate: RTCIceCandidate): Promise<void> {\n    try {\n      if (this._pc) {\n        await this._pc.addIceCandidate(candidate);\n      }\n    } catch (_error) {\n      this._traceLog('invalid ice candidate', candidate);\n    }\n  }\n\n  _sendIceCandidate(candidate: RTCIceCandidate): void {\n    const message = { type: 'candidate', ice: candidate };\n    this._sendWs(message);\n  }\n\n  _sendSdp(sessionDescription: RTCSessionDescription): void {\n    this._sendWs(sessionDescription);\n  }\n\n  _sendWs(message: Record<string, any>) {\n    if (this._ws) {\n      this._ws.send(JSON.stringify(message));\n    }\n  }\n\n  _getTransceiver(pc: RTCPeerConnection, track: any): RTCRtpTransceiver | null {\n    let transceiver = null;\n    pc.getTransceivers().forEach((t: RTCRtpTransceiver) => {\n      if (t.sender == track || t.receiver == track) transceiver = t;\n    });\n    if (!transceiver) {\n      throw new Error('invalid transceiver');\n    }\n    return transceiver;\n  }\n\n  _findDataChannel(label: string): RTCDataChannel | undefined {\n    return this._dataChannels.find((channel) => channel.label == label);\n  }\n\n  async _closeDataChannel(dataChannel: RTCDataChannel): Promise<void> {\n    return new Promise((resolve) => {\n      if (dataChannel.readyState === 'closed') return resolve();\n      dataChannel.onclose = null;\n      const timerId = setInterval(() => {\n        if (dataChannel.readyState === 'closed') {\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      dataChannel && dataChannel.close();\n    });\n  }\n\n  async _closePeerConnection(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (browser() === 'safari' && this._pc) {\n        this._pc.oniceconnectionstatechange = () => {};\n        this._pc.close();\n        this._pc = null;\n        return resolve();\n      }\n      if (!this._pc) return resolve();\n      if (this._pc && this._pc.signalingState == 'closed') {\n        this._pc = null;\n        return resolve();\n      }\n      this._pc.oniceconnectionstatechange = () => {};\n      const timerId = setInterval(() => {\n        if (!this._pc) {\n          clearInterval(timerId);\n          return resolve();\n        }\n        if (this._pc && this._pc.signalingState == 'closed') {\n          this._pc = null;\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      this._pc.close();\n    });\n  }\n\n  async _closeWebSocketConnection(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (!this._ws) return resolve();\n      if (this._ws && this._ws.readyState === 3) {\n        this._ws = null;\n        return resolve();\n      }\n      this._ws.onclose = () => {};\n      const timerId = setInterval(() => {\n        if (!this._ws) {\n          clearInterval(timerId);\n          return resolve();\n        }\n        if (this._ws.readyState === 3) {\n          this._ws = null;\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      this._ws && this._ws.close();\n    });\n  }\n\n  _traceLog(title: string, message?: Record<string, any> | string) {\n    if (!this.debug) return;\n    traceLog(title, message);\n  }\n}\n\nexport default ConnectionBase;\n","import Connection from './connection';\nimport { ConnectionOptions } from './connection/options';\nimport { randomString } from './utils';\n\n/**\n * オーディオ、ビデオの送受信方向に関するオプションです。\n * - sendrecv\n * - recvonly\n * - sendonly\n *\n * @typedef {string} ConnectionDirection\n */\n\n/**\n * @typedef {Object} ConnectionAudioOption - オーディオ接続に関するオプションです。\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\n\n/**\n * ビデオ接続のコーデックに関するオプションです。\n * - VP8\n * - VP9\n * - AV1\n * - H264\n * - H265\n *\n * @typedef {string} VideoCodecOption\n */\n\n/**\n * @typedef {Object} ConnectionVideoOption - ビデオ接続に関するオプションです。\n * @property {VideoCodecOption} codec コーデックの設定\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\n\n/**\n * @typedef {Object} ConnectionOptions - 接続時に指定するオプションです。\n * @property {ConnectionAudioOption} audio オーディオの設定\n * @property {ConnectionVideoOption} video ビデオの設定\n * @property {string} clientId クライアントID\n * @property {Array.<RTCIceServer>} iceServers ayame server から iceServers が返って来なかった場合に使われる iceServer の情報\n * @property {string} signalingKey 送信するシグナリングキー\n */\n\n/**\n * Ayame Connection のデフォルトのオプションです。\n *\n * audio: { direction: 'sendrecv', enabled: true}\n *\n * video: { direction: 'sendrecv', enabled: true}\n *\n * iceServers: []\n *\n * clientId: randomString(17)\n *\n * @type {ConnectionOptions} ConnectionOptions\n */\nexport const defaultOptions: ConnectionOptions = {\n  audio: { direction: 'sendrecv', enabled: true },  // note: codec is 'undefined'\n  video: { direction: 'sendrecv', enabled: true },  // note: codec is 'undefined'\n  iceServers: [],\n  clientId: randomString(17)\n};\n\n/**\n * @desc Ayame Connection を生成します。\n * @param {string} signalingUrl シグナリングに用いる websocket url\n * @param {string} roomId 接続する roomId\n * @param {ConnectionOptions} [options=defaultOptions] 接続時のオプション\n * @param {boolean} [debug=false] デバッグログを出力するかどうかのフラグ\n * @param {boolean} [isRelay=false] iceTranspolicy を強制的に relay するかどうかのフラグ(デバッグ用)\n * @return {Connection} 生成された Ayame Connection\n */\nexport function connection(\n  signalingUrl: string,\n  roomId: string,\n  options: ConnectionOptions = defaultOptions,\n  debug = false,\n  isRelay = false\n): Connection {\n  return new Connection(signalingUrl, roomId, options, debug, isRelay);\n}\n\n/**\n * @desc Ayame Web SDK のバージョンを出力します。\n * @return {string} Ayame Web SDK のバージョン\n */\nexport function version(): string {\n  return process.version;\n}\n"],"names":["g","f","exports","module","define","amd","globalThis","self","Ayame","this","browser","ua","window","navigator","userAgent","toLocaleLowerCase","indexOf","getVideoCodecsFromString","codec","codecs","mimeType","filteredCodecs","filter","c","length","Error","getAudioCodecsFromString","startsWith","clockRate","sdpFmtpLine","split","console","log","selectedCodecIndex","findIndex","parseInt","selectedCodec","splice","unshift","Connection","constructor","signalingUrl","roomId","options","debug","isRelay","_removeVideoCodec","stream","remoteStream","_pc","_ws","authnMetadata","authzMetadata","_dataChannels","_isOffer","_isExistUser","connectionState","_pcConfig","iceServers","iceTransportPolicy","_callbacks","open","connect","disconnect","addstream","removestream","bye","datachannel","on","kind","callback","async","forEach","dataChannel","_closeDataChannel","_closePeerConnection","_closeWebSocketConnection","Promise","resolve","reject","WebSocket","onclose","_disconnect","reason","onerror","onopen","registerMessage","type","clientId","undefined","key","signalingKey","_sendWs","onmessage","event","data","message","JSON","parse","Array","isArray","_traceLog","isExistUser","_createPeerConnection","_sendOffer","signalingState","_setOffer","RTCSessionDescription","_setAnswer","ice","candidate","RTCIceCandidate","_addIceCandidate","error","pc","RTCPeerConnection","audioTrack","getAudioTracks","audio","direction","audioSender","addTrack","audioTransceiver","_getTransceiver","_isAudioCodecSpecified","setCodecPreferences","audioCapabilities","RTCRtpSender","getCapabilities","audioCodecs","enabled","addTransceiver","RTCRtpReceiver","videoTrack","getVideoTracks","video","videoSender","videoTransceiver","_isVideoCodecSpecified","videoCapabilities","videoCodecs","tracks","ontrack","callbackEvent","push","track","mediaStream","MediaStream","streams","onicecandidate","_sendIceCandidate","oniceconnectionstatechange","iceConnectionState","onsignalingstatechange","_","ondatachannel","_onDataChannel","bind","label","_findDataChannel","createDataChannel","channel","map","offer","createOffer","offerToReceiveAudio","offerToReceiveVideo","sdp","internalFunc","tmpSdp","codecre","RegExp","rtpmaps","match","rtpmap","modsdp","replace","rtcpre","fmtpre","aptpre","aptmaps","fmtpmap","rtppre","videore","videolines","videoelems","substring","modvideoline","videoelem","index","removeCodec","setLocalDescription","localDescription","_sendSdp","answer","createAnswer","sessionDescription","setRemoteDescription","_createAnswer","addIceCandidate","_error","send","stringify","transceiver","getTransceivers","t","sender","receiver","find","readyState","timerId","setInterval","clearInterval","close","title","value","prefix","performance","now","toFixed","info","traceLog","super","metadataOption","_signaling","_createDataChannel","defaultOptions","strLength","result","charSet","charAt","Math","floor","random","join","randomString","connection","version","process","Object","defineProperty"],"mappings":"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"}